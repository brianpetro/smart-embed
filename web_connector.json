{
  "script": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// models.json\nvar require_models = __commonJS({\n  \"models.json\"(exports, module2) {\n    module2.exports = {\n      \"TaylorAI/bge-micro-v2\": {\n        model_name: \"TaylorAI/bge-micro-v2\",\n        batch_size: 1,\n        dims: 384,\n        max_tokens: 512,\n        name: \"BGE-micro-v2\",\n        description: \"Local, 512 tokens, 384 dim\",\n        type: \"huggingface-transformers\"\n      },\n      \"Xenova/bge-small-en-v1.5\": {\n        model_name: \"Xenova/bge-small-en-v1.5\",\n        batch_size: 1,\n        dims: 384,\n        max_tokens: 512,\n        name: \"BGE-small\",\n        description: \"Local, 512 tokens, 384 dim\",\n        type: \"huggingface-transformers\"\n      },\n      \"Xenova/jina-embeddings-v2-small-en-2048\": {\n        model_name: \"Xenova/jina-embeddings-v2-small-en\",\n        batch_size: 1,\n        dims: 512,\n        max_tokens: 2048,\n        name: \"Jina-v2-small-2K\",\n        description: \"Local, 2,048 tokens, 512 dim\",\n        type: \"huggingface-transformers\"\n      },\n      \"Xenova/jina-embeddings-v2-small-en-4096\": {\n        model_name: \"Xenova/jina-embeddings-v2-small-en\",\n        batch_size: 1,\n        dims: 512,\n        max_tokens: 4096,\n        name: \"Jina-v2-small-4K\",\n        description: \"Local, 4,096 tokens, 512 dim\",\n        type: \"huggingface-transformers\"\n      },\n      \"Xenova/jina-embeddings-v2-small-en-8192\": {\n        model_name: \"Xenova/jina-embeddings-v2-small-en\",\n        batch_size: 1,\n        dims: 512,\n        max_tokens: 8192,\n        name: \"Jina-v2-small-8K\",\n        description: \"Local, 8,192 tokens, 512 dim\",\n        type: \"huggingface-transformers\"\n      },\n      \"text-embedding-3-small\": {\n        model_name: \"text-embedding-3-small\",\n        batch_size: 50,\n        dims: 1536,\n        max_tokens: 8191,\n        name: \"OpenAI Text-3 Small\",\n        description: \"API, 8,191 tokens, 1,536 dim\",\n        type: \"openai\"\n      },\n      \"text-embedding-3-large\": {\n        model_name: \"text-embedding-3-large\",\n        batch_size: 50,\n        dims: 3072,\n        max_tokens: 8191,\n        name: \"OpenAI Text-3 Large\",\n        description: \"API, 8,191 tokens, 3,072 dim\",\n        type: \"openai\"\n      },\n      \"text-embedding-3-small-512\": {\n        model_name: \"text-embedding-3-small\",\n        batch_size: 50,\n        dims: 512,\n        max_tokens: 8191,\n        name: \"OpenAI Text-3 Small - 512\",\n        description: \"API, 8,191 tokens, 512 dim\",\n        type: \"openai\"\n      },\n      \"text-embedding-3-large-256\": {\n        model_name: \"text-embedding-3-large\",\n        batch_size: 50,\n        dims: 256,\n        max_tokens: 8191,\n        name: \"OpenAI Text-3 Large - 256\",\n        description: \"API, 8,191 tokens, 256 dim\",\n        type: \"openai\"\n      },\n      \"text-embedding-ada-002\": {\n        model_name: \"text-embedding-ada-002\",\n        batch_size: 50,\n        dims: 1536,\n        max_tokens: 8191,\n        name: \"OpenAI Ada\",\n        description: \"API, 8,191 tokens, 1,536 dim\",\n        type: \"openai\"\n      }\n    };\n  }\n});\n\n// SmartEmbed.js\nvar require_SmartEmbed = __commonJS({\n  \"SmartEmbed.js\"(exports) {\n    var models = require_models();\n    var SmartEmbed = class {\n      constructor(model_config_key) {\n        this.model_config_key = model_config_key;\n        this.config = models[this.model_config_key];\n      }\n      static async create(model_config_key, ...args) {\n        const adapter = new this(model_config_key, ...args);\n        await adapter.init();\n        return adapter;\n      }\n      async init() {\n      }\n      /**\n       * @param {string} input\n       * @returns {Promise<number>}\n       */\n      async count_tokens(input) {\n      }\n      /**\n       * @param {string} input\n       * @returns {Promise<number[]>}\n       */\n      async embed(input) {\n      }\n      /**\n       * @param {string[]} input\n       * @returns {Promise<number[][]>}\n       */\n      async embed_batch(input) {\n      }\n      get batch_size() {\n        return this.config.batch_size;\n      }\n      get dims() {\n        return this.config.dims;\n      }\n      get max_tokens() {\n        return this.config.max_tokens;\n      }\n      get model_name() {\n        return this.config.model_name;\n      }\n    };\n    exports.SmartEmbed = SmartEmbed;\n  }\n});\n\n// SmartEmbedTransformersNodeAdapter.js\nvar require_SmartEmbedTransformersNodeAdapter = __commonJS({\n  \"SmartEmbedTransformersNodeAdapter.js\"(exports) {\n    var { SmartEmbed } = require_SmartEmbed();\n    var SmartEmbedTransformersNodeAdapter = class extends SmartEmbed {\n      // async init(this.model_name = 'Xenova/bge-small-en-v1.5') {\n      async init() {\n        const { env, pipeline, AutoTokenizer } = await import(\"@xenova/transformers\");\n        env.allowLocalModels = false;\n        this.model = await pipeline(\"feature-extraction\", this.model_name, { quantized: true, max_length: this.config.max_tokens });\n        this.tokenizer = await AutoTokenizer.from_pretrained(this.model_name);\n      }\n      async embed_batch(items) {\n        items = items.filter((item) => {\n          var _a;\n          return ((_a = item.embed_input) == null ? void 0 : _a.length) > 0;\n        });\n        if (!(items == null ? void 0 : items.length))\n          return [];\n        const tokens = await Promise.all(items.map((item) => this.count_tokens(item.embed_input)));\n        const embed_input = await Promise.all(items.map(async (item, i) => {\n          if (tokens[i] < this.config.max_tokens)\n            return item.embed_input;\n          let token_ct = tokens[i];\n          let truncated_input = item.embed_input;\n          while (token_ct > this.config.max_tokens) {\n            const pct = this.config.max_tokens / token_ct;\n            const max_chars = Math.floor(truncated_input.length * pct * 0.9);\n            truncated_input = truncated_input.substring(0, max_chars) + \"...\";\n            token_ct = await this.count_tokens(truncated_input);\n          }\n          console.log(\"Input too long. Truncating to \", truncated_input.length, \" characters.\");\n          console.log(\"Tokens: \", tokens[i], \" -> \", token_ct);\n          tokens[i] = token_ct;\n          return truncated_input;\n        }));\n        try {\n          const resp = await this.model(embed_input, { pooling: \"mean\", normalize: true });\n          return items.map((item, i) => {\n            item.vec = Array.from(resp[i].data);\n            item.tokens = tokens[i];\n            return item;\n          });\n        } catch (err) {\n          console.log(err);\n          console.log(\"Error embedding batch. Trying one at a time...\");\n        }\n        return await Promise.all(items.map(async (item) => {\n          const { vec, tokens: tokens2, error } = await this.embed(item.embed_input);\n          if (error) {\n            console.log(\"Error embedding item: \", item.key);\n            console.log(error);\n            item.error = error;\n            return item;\n          }\n          if (!vec) {\n            console.log(\"Error embedding item: \", item.key);\n            console.log(\"Vec: \", vec);\n            console.log(\"Error: \", error);\n            console.log(\"Tokens: \", tokens2);\n            console.log(\"No vec returned\");\n            item.error = \"No vec returned\";\n            return item;\n          }\n          item.vec = vec.map((val) => Math.round(val * 1e8) / 1e8);\n          item.tokens = tokens2;\n          return item;\n        }));\n      }\n      async embed(input) {\n        const output = { embed_input: input };\n        if (!input)\n          return { ...output, error: \"No input text.\" };\n        if (!this.model)\n          await this.init();\n        try {\n          output.tokens = await this.count_tokens(input);\n          if (output.tokens < 1)\n            return { ...output, error: \"Input too short.\" };\n          if (output.tokens < this.config.max_tokens) {\n            const embedding = await this.model(input, { pooling: \"mean\", normalize: true });\n            output.vec = Array.from(embedding.data).map((val) => Math.round(val * 1e8) / 1e8);\n          } else {\n            const pct = this.config.max_tokens / output.tokens;\n            const max_chars = Math.floor(input.length * pct * 0.95);\n            input = input.substring(0, max_chars) + \"...\";\n            output.truncated = true;\n            console.log(\"Input too long. Truncating to \", input.length, \" characters.\");\n            const { vec, tokens } = await this.embed(input);\n            output.vec = vec;\n            output.tokens = tokens;\n          }\n          return output;\n        } catch (err) {\n          console.log(err);\n          return { ...output, error: err.message };\n        }\n      }\n      async count_tokens(text) {\n        if (!this.tokenizer)\n          await this.init();\n        const { input_ids } = await this.tokenizer(text);\n        return input_ids.data.length;\n      }\n    };\n    exports.SmartEmbedTransformersNodeAdapter = SmartEmbedTransformersNodeAdapter;\n    exports.SmartEmbedLocalAdapter = SmartEmbedTransformersNodeAdapter;\n  }\n});\n\n// SmartEmbedTransformersWebConnector.js\nvar require_SmartEmbedTransformersWebConnector = __commonJS({\n  \"SmartEmbedTransformersWebConnector.js\"(exports) {\n    var { SmartEmbedTransformersNodeAdapter } = require_SmartEmbedTransformersNodeAdapter();\n    var models = require_models();\n    var SmartEmbedTransformersWebConnector = class extends SmartEmbedTransformersNodeAdapter {\n      constructor(model_config_key, window2) {\n        super(model_config_key);\n        this.model = null;\n        this.running_init = false;\n        this.window = window2;\n        this.embed_ct = 0;\n        this.timestamp = null;\n        this.tokens = 0;\n      }\n      async init() {\n        if (this.model)\n          return console.log(\"Smart Local Model already loaded\");\n        if (this.running_init)\n          await new Promise((resolve) => setTimeout(resolve, 3e3));\n        if (!this.model && !this.running_init)\n          this.running_init = true;\n        console.log(\"Loading Smart Local Model\");\n        const { pipeline, env, AutoTokenizer } = await import(\"https://cdn.jsdelivr.net/npm/@xenova/transformers@latest\");\n        env.allowLocalModels = false;\n        this.model = await pipeline(\"feature-extraction\", this.model_name, { quantized: true });\n        this.tokenizer = await AutoTokenizer.from_pretrained(this.model_name);\n        this.running_init = false;\n        this.window.tokenizer = this.tokenizer;\n        console.log(await this.embed(\"test\"));\n        this.window.parent.postMessage({ type: \"model_loaded\", data: true }, \"*\");\n        this.window.addEventListener(\"message\", this.handle_ipc.bind(this), false);\n      }\n      async handle_ipc(event) {\n        if (event.data.type == \"smart_embed\")\n          this.embed_handler(event.data);\n        if (event.data.type == \"smart_embed_token_ct\")\n          this.count_tokens_handler(event.data.embed_input);\n      }\n      async embed_handler(event_data) {\n        const { embed_input, handler_id } = event_data;\n        if (!this.timestamp)\n          this.timestamp = Date.now();\n        if (Array.isArray(embed_input)) {\n          const resp = await this.embed_batch(embed_input);\n          const send_data = {\n            type: \"smart_embed_resp\",\n            handler_id,\n            data: resp\n          };\n          this.window.postMessage(send_data, \"*\");\n          this.tokens += resp.reduce((acc, item) => acc + item.tokens, 0);\n          this.embed_ct += resp.length;\n        } else {\n          if (!this.timestamp)\n            this.timestamp = Date.now();\n          const send_data = await this.embed(embed_input);\n          send_data.type = \"smart_embed_resp\";\n          if (handler_id)\n            send_data.handler_id = handler_id;\n          this.window.postMessage(send_data, \"*\");\n          this.tokens += send_data.tokens;\n          this.embed_ct++;\n        }\n        if (Date.now() - this.timestamp > 1e4) {\n          console.log(`Embedded: ${this.embed_ct} inputs (${this.tokens} tokens, ${(this.tokens / ((Date.now() - this.timestamp) / 1e3)).toFixed(0)} tokens/sec)`);\n          this.timestamp = null;\n          this.tokens = 0;\n          this.embed_ct = 0;\n        }\n      }\n      async count_tokens_handler(input) {\n        const output = await this.count_tokens(input);\n        const send_data = {\n          type: \"smart_embed_token_ct\",\n          text: \"count:\" + input,\n          count: output\n        };\n        this.window.postMessage(send_data, \"*\");\n      }\n    };\n    exports.SmartEmbedTransformersWebConnector = SmartEmbedTransformersWebConnector;\n  }\n});\n\n// smart_embed_web.js\nwindow.addEventListener(\"message\", init);\nasync function init(event) {\n  if (event.data.type === \"init\") {\n    window.removeEventListener(\"message\", init);\n    const model_config_key = event.data.model_config_key;\n    const { SmartEmbedTransformersWebConnector } = await Promise.resolve().then(() => __toESM(require_SmartEmbedTransformersWebConnector()));\n    const model = await SmartEmbedTransformersWebConnector.create(model_config_key, window);\n    window.model = model;\n  }\n}\n//# sourceMappingURL=data:application/json;base64,\n"
}