{
  "script": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// models.json\nvar require_models = __commonJS({\n  \"models.json\"(exports, module2) {\n    module2.exports = {\n      \"TaylorAI/bge-micro-v2\": {\n        model_name: \"TaylorAI/bge-micro-v2\",\n        batch_size: 1,\n        dims: 384,\n        max_tokens: 512,\n        name: \"BGE-micro-v2\",\n        description: \"Local, 512 tokens, 384 dim\",\n        type: \"huggingface-transformers\"\n      },\n      \"Xenova/bge-small-en-v1.5\": {\n        model_name: \"Xenova/bge-small-en-v1.5\",\n        batch_size: 1,\n        dims: 384,\n        max_tokens: 512,\n        name: \"BGE-small\",\n        description: \"Local, 512 tokens, 384 dim\",\n        type: \"huggingface-transformers\"\n      },\n      \"Xenova/jina-embeddings-v2-small-en-2048\": {\n        model_name: \"Xenova/jina-embeddings-v2-small-en\",\n        batch_size: 1,\n        dims: 512,\n        max_tokens: 2048,\n        name: \"Jina-v2-small-2K\",\n        description: \"Local, 2,048 tokens, 512 dim\",\n        type: \"huggingface-transformers\"\n      },\n      \"Xenova/jina-embeddings-v2-small-en-4096\": {\n        model_name: \"Xenova/jina-embeddings-v2-small-en\",\n        batch_size: 1,\n        dims: 512,\n        max_tokens: 4096,\n        name: \"Jina-v2-small-4K\",\n        description: \"Local, 4,096 tokens, 512 dim\",\n        type: \"huggingface-transformers\"\n      },\n      \"Xenova/jina-embeddings-v2-small-en-8192\": {\n        model_name: \"Xenova/jina-embeddings-v2-small-en\",\n        batch_size: 1,\n        dims: 512,\n        max_tokens: 8192,\n        name: \"Jina-v2-small-8K\",\n        description: \"Local, 8,192 tokens, 512 dim\",\n        type: \"huggingface-transformers\"\n      },\n      \"text-embedding-3-small\": {\n        model_name: \"text-embedding-3-small\",\n        batch_size: 50,\n        dims: 1536,\n        max_tokens: 8191,\n        name: \"OpenAI Text-3 Small\",\n        description: \"API, 8,191 tokens, 1,536 dim\",\n        type: \"openai\"\n      },\n      \"text-embedding-3-large\": {\n        model_name: \"text-embedding-3-large\",\n        batch_size: 50,\n        dims: 3072,\n        max_tokens: 8191,\n        name: \"OpenAI Text-3 Large\",\n        description: \"API, 8,191 tokens, 3,072 dim\",\n        type: \"openai\"\n      },\n      \"text-embedding-3-small-512\": {\n        model_name: \"text-embedding-3-small\",\n        batch_size: 50,\n        dims: 512,\n        max_tokens: 8191,\n        name: \"OpenAI Text-3 Small - 512\",\n        description: \"API, 8,191 tokens, 512 dim\",\n        type: \"openai\"\n      },\n      \"text-embedding-3-large-256\": {\n        model_name: \"text-embedding-3-large\",\n        batch_size: 50,\n        dims: 256,\n        max_tokens: 8191,\n        name: \"OpenAI Text-3 Large - 256\",\n        description: \"API, 8,191 tokens, 256 dim\",\n        type: \"openai\"\n      },\n      \"text-embedding-ada-002\": {\n        model_name: \"text-embedding-ada-002\",\n        batch_size: 50,\n        dims: 1536,\n        max_tokens: 8191,\n        name: \"OpenAI Ada\",\n        description: \"API, 8,191 tokens, 1,536 dim\",\n        type: \"openai\"\n      }\n    };\n  }\n});\n\n// SmartEmbed.js\nvar require_SmartEmbed = __commonJS({\n  \"SmartEmbed.js\"(exports) {\n    var models = require_models();\n    var SmartEmbed = class {\n      constructor(model_config_key) {\n        this.model_config_key = model_config_key;\n        this.config = models[this.model_config_key];\n      }\n      static async create(model_config_key, ...args) {\n        const adapter = new this(model_config_key, ...args);\n        await adapter.init();\n        return adapter;\n      }\n      async init() {\n      }\n      /**\n       * @param {string} input\n       * @returns {Promise<number>}\n       */\n      async count_tokens(input) {\n      }\n      /**\n       * @param {string} input\n       * @returns {Promise<number[]>}\n       */\n      async embed(input) {\n      }\n      /**\n       * @param {string[]} input\n       * @returns {Promise<number[][]>}\n       */\n      async embed_batch(input) {\n      }\n      get batch_size() {\n        return this.config.batch_size;\n      }\n      get dims() {\n        return this.config.dims;\n      }\n      get max_tokens() {\n        return this.config.max_tokens;\n      }\n      get model_name() {\n        return this.config.model_name;\n      }\n    };\n    exports.SmartEmbed = SmartEmbed;\n  }\n});\n\n// SmartEmbedTransformersNodeAdapter.js\nvar require_SmartEmbedTransformersNodeAdapter = __commonJS({\n  \"SmartEmbedTransformersNodeAdapter.js\"(exports) {\n    var { SmartEmbed } = require_SmartEmbed();\n    var SmartEmbedTransformersNodeAdapter = class extends SmartEmbed {\n      // async init(this.model_name = 'Xenova/bge-small-en-v1.5') {\n      async init() {\n        const { env, pipeline, AutoTokenizer } = await import(\"@xenova/transformers\");\n        env.allowLocalModels = false;\n        this.model = await pipeline(\"feature-extraction\", this.model_name, { quantized: true, max_length: this.config.max_tokens });\n        this.tokenizer = await AutoTokenizer.from_pretrained(this.model_name);\n      }\n      async embed_batch(items) {\n        items = items.filter((item) => {\n          var _a;\n          return ((_a = item.embed_input) == null ? void 0 : _a.length) > 0;\n        });\n        if (!(items == null ? void 0 : items.length))\n          return [];\n        const tokens = await Promise.all(items.map((item) => this.count_tokens(item.embed_input)));\n        const embed_input = await Promise.all(items.map(async (item, i) => {\n          if (tokens[i] < this.config.max_tokens)\n            return item.embed_input;\n          let token_ct = tokens[i];\n          let truncated_input = item.embed_input;\n          while (token_ct > this.config.max_tokens) {\n            const pct = this.config.max_tokens / token_ct;\n            const max_chars = Math.floor(truncated_input.length * pct * 0.9);\n            truncated_input = truncated_input.substring(0, max_chars) + \"...\";\n            token_ct = await this.count_tokens(truncated_input);\n          }\n          console.log(\"Input too long. Truncating to \", truncated_input.length, \" characters.\");\n          console.log(\"Tokens: \", tokens[i], \" -> \", token_ct);\n          tokens[i] = token_ct;\n          return truncated_input;\n        }));\n        try {\n          const resp = await this.model(embed_input, { pooling: \"mean\", normalize: true });\n          return items.map((item, i) => {\n            item.vec = Array.from(resp[i].data);\n            item.tokens = tokens[i];\n            return item;\n          });\n        } catch (err) {\n          console.log(err);\n          console.log(\"Error embedding batch. Trying one at a time...\");\n        }\n        return await Promise.all(items.map(async (item) => {\n          const { vec, tokens: tokens2, error } = await this.embed(item.embed_input);\n          if (error) {\n            console.log(\"Error embedding item: \", item.key);\n            console.log(error);\n            item.error = error;\n            return item;\n          }\n          if (!vec) {\n            console.log(\"Error embedding item: \", item.key);\n            console.log(\"Vec: \", vec);\n            console.log(\"Error: \", error);\n            console.log(\"Tokens: \", tokens2);\n            console.log(\"No vec returned\");\n            item.error = \"No vec returned\";\n            return item;\n          }\n          item.vec = vec.map((val) => Math.round(val * 1e8) / 1e8);\n          item.tokens = tokens2;\n          return item;\n        }));\n      }\n      async embed(input) {\n        const output = { embed_input: input };\n        if (!input)\n          return { ...output, error: \"No input text.\" };\n        if (!this.model)\n          await this.init();\n        try {\n          output.tokens = await this.count_tokens(input);\n          if (output.tokens < 1)\n            return { ...output, error: \"Input too short.\" };\n          if (output.tokens < this.config.max_tokens) {\n            const embedding = await this.model(input, { pooling: \"mean\", normalize: true });\n            output.vec = Array.from(embedding.data).map((val) => Math.round(val * 1e8) / 1e8);\n          } else {\n            const pct = this.config.max_tokens / output.tokens;\n            const max_chars = Math.floor(input.length * pct * 0.95);\n            input = input.substring(0, max_chars) + \"...\";\n            output.truncated = true;\n            console.log(\"Input too long. Truncating to \", input.length, \" characters.\");\n            const { vec, tokens } = await this.embed(input);\n            output.vec = vec;\n            output.tokens = tokens;\n          }\n          return output;\n        } catch (err) {\n          console.log(err);\n          return { ...output, error: err.message };\n        }\n      }\n      async count_tokens(text) {\n        if (!this.tokenizer)\n          await this.init();\n        const { input_ids } = await this.tokenizer(text);\n        return input_ids.data.length;\n      }\n    };\n    exports.SmartEmbedTransformersNodeAdapter = SmartEmbedTransformersNodeAdapter;\n    exports.SmartEmbedLocalAdapter = SmartEmbedTransformersNodeAdapter;\n  }\n});\n\n// SmartEmbedTransformersWebConnector.js\nvar require_SmartEmbedTransformersWebConnector = __commonJS({\n  \"SmartEmbedTransformersWebConnector.js\"(exports) {\n    var { SmartEmbedTransformersNodeAdapter } = require_SmartEmbedTransformersNodeAdapter();\n    var models = require_models();\n    var SmartEmbedTransformersWebConnector = class extends SmartEmbedTransformersNodeAdapter {\n      constructor(model_config_key, window2) {\n        super(model_config_key);\n        this.model = null;\n        this.running_init = false;\n        this.window = window2;\n        this.embed_ct = 0;\n        this.timestamp = null;\n        this.tokens = 0;\n      }\n      async init() {\n        if (this.model)\n          return console.log(\"Smart Local Model already loaded\");\n        if (this.running_init)\n          await new Promise((resolve) => setTimeout(resolve, 3e3));\n        if (!this.model && !this.running_init)\n          this.running_init = true;\n        console.log(\"Loading Smart Local Model\");\n        const { pipeline, env, AutoTokenizer } = await import(\"https://cdn.jsdelivr.net/npm/@xenova/transformers@latest\");\n        env.allowLocalModels = false;\n        this.model = await pipeline(\"feature-extraction\", this.model_name, { quantized: true });\n        this.tokenizer = await AutoTokenizer.from_pretrained(this.model_name);\n        this.running_init = false;\n        this.window.tokenizer = this.tokenizer;\n        console.log(await this.embed(\"test\"));\n        this.window.parent.postMessage({ type: \"model_loaded\", data: true }, \"*\");\n        this.window.addEventListener(\"message\", this.handle_ipc.bind(this), false);\n      }\n      async handle_ipc(event) {\n        if (event.data.type == \"smart_embed\")\n          this.embed_handler(event.data);\n        if (event.data.type == \"smart_embed_token_ct\")\n          this.count_tokens_handler(event.data.embed_input);\n      }\n      async embed_handler(event_data) {\n        const { embed_input, handler_id } = event_data;\n        if (!this.timestamp)\n          this.timestamp = Date.now();\n        if (Array.isArray(embed_input)) {\n          const resp = await this.embed_batch(embed_input);\n          const send_data = {\n            type: \"smart_embed_resp\",\n            handler_id,\n            data: resp\n          };\n          this.window.postMessage(send_data, \"*\");\n          this.tokens += resp.reduce((acc, item) => acc + item.tokens, 0);\n          this.embed_ct += resp.length;\n        } else {\n          if (!this.timestamp)\n            this.timestamp = Date.now();\n          const send_data = await this.embed(embed_input);\n          send_data.type = \"smart_embed_resp\";\n          if (handler_id)\n            send_data.handler_id = handler_id;\n          this.window.postMessage(send_data, \"*\");\n          this.tokens += send_data.tokens;\n          this.embed_ct++;\n        }\n        if (Date.now() - this.timestamp > 1e4) {\n          console.log(`Embedded: ${this.embed_ct} inputs (${this.tokens} tokens, ${(this.tokens / ((Date.now() - this.timestamp) / 1e3)).toFixed(0)} tokens/sec)`);\n          this.timestamp = null;\n          this.tokens = 0;\n          this.embed_ct = 0;\n        }\n      }\n      async count_tokens_handler(input) {\n        const output = await this.count_tokens(input);\n        const send_data = {\n          type: \"smart_embed_token_ct\",\n          text: \"count:\" + input,\n          count: output\n        };\n        this.window.postMessage(send_data, \"*\");\n      }\n    };\n    exports.SmartEmbedTransformersWebConnector = SmartEmbedTransformersWebConnector;\n  }\n});\n\n// smart_embed_web.js\nwindow.addEventListener(\"message\", init);\nasync function init(event) {\n  if (event.data.type === \"init\") {\n    window.removeEventListener(\"message\", init);\n    const model_config_key = event.data.model_config_key;\n    const { SmartEmbedTransformersWebConnector } = await Promise.resolve().then(() => __toESM(require_SmartEmbedTransformersWebConnector()));\n    const model = await SmartEmbedTransformersWebConnector.create(model_config_key, window);\n    window.model = model;\n  }\n}\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibW9kZWxzLmpzb24iLCAiU21hcnRFbWJlZC5qcyIsICJTbWFydEVtYmVkVHJhbnNmb3JtZXJzTm9kZUFkYXB0ZXIuanMiLCAiU21hcnRFbWJlZFRyYW5zZm9ybWVyc1dlYkNvbm5lY3Rvci5qcyIsICJzbWFydF9lbWJlZF93ZWIuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIntcbiAgXCJUYXlsb3JBSS9iZ2UtbWljcm8tdjJcIjoge1xuICAgIFwibW9kZWxfbmFtZVwiOiBcIlRheWxvckFJL2JnZS1taWNyby12MlwiLFxuICAgIFwiYmF0Y2hfc2l6ZVwiOiAxLFxuICAgIFwiZGltc1wiOiAzODQsXG4gICAgXCJtYXhfdG9rZW5zXCI6IDUxMixcbiAgICBcIm5hbWVcIjogXCJCR0UtbWljcm8tdjJcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiTG9jYWwsIDUxMiB0b2tlbnMsIDM4NCBkaW1cIixcbiAgICBcInR5cGVcIjogXCJodWdnaW5nZmFjZS10cmFuc2Zvcm1lcnNcIlxuICB9LFxuICBcIlhlbm92YS9iZ2Utc21hbGwtZW4tdjEuNVwiOiB7XG4gICAgXCJtb2RlbF9uYW1lXCI6IFwiWGVub3ZhL2JnZS1zbWFsbC1lbi12MS41XCIsXG4gICAgXCJiYXRjaF9zaXplXCI6IDEsXG4gICAgXCJkaW1zXCI6IDM4NCxcbiAgICBcIm1heF90b2tlbnNcIjogNTEyLFxuICAgIFwibmFtZVwiOiBcIkJHRS1zbWFsbFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJMb2NhbCwgNTEyIHRva2VucywgMzg0IGRpbVwiLFxuICAgIFwidHlwZVwiOiBcImh1Z2dpbmdmYWNlLXRyYW5zZm9ybWVyc1wiXG4gIH0sXG4gIFwiWGVub3ZhL2ppbmEtZW1iZWRkaW5ncy12Mi1zbWFsbC1lbi0yMDQ4XCI6IHtcbiAgICBcIm1vZGVsX25hbWVcIjogXCJYZW5vdmEvamluYS1lbWJlZGRpbmdzLXYyLXNtYWxsLWVuXCIsXG4gICAgXCJiYXRjaF9zaXplXCI6IDEsXG4gICAgXCJkaW1zXCI6IDUxMixcbiAgICBcIm1heF90b2tlbnNcIjogMjA0OCxcbiAgICBcIm5hbWVcIjogXCJKaW5hLXYyLXNtYWxsLTJLXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkxvY2FsLCAyLDA0OCB0b2tlbnMsIDUxMiBkaW1cIixcbiAgICBcInR5cGVcIjogXCJodWdnaW5nZmFjZS10cmFuc2Zvcm1lcnNcIlxuICB9LFxuICBcIlhlbm92YS9qaW5hLWVtYmVkZGluZ3MtdjItc21hbGwtZW4tNDA5NlwiOiB7XG4gICAgXCJtb2RlbF9uYW1lXCI6IFwiWGVub3ZhL2ppbmEtZW1iZWRkaW5ncy12Mi1zbWFsbC1lblwiLFxuICAgIFwiYmF0Y2hfc2l6ZVwiOiAxLFxuICAgIFwiZGltc1wiOiA1MTIsXG4gICAgXCJtYXhfdG9rZW5zXCI6IDQwOTYsXG4gICAgXCJuYW1lXCI6IFwiSmluYS12Mi1zbWFsbC00S1wiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJMb2NhbCwgNCwwOTYgdG9rZW5zLCA1MTIgZGltXCIsXG4gICAgXCJ0eXBlXCI6IFwiaHVnZ2luZ2ZhY2UtdHJhbnNmb3JtZXJzXCJcbiAgfSxcbiAgXCJYZW5vdmEvamluYS1lbWJlZGRpbmdzLXYyLXNtYWxsLWVuLTgxOTJcIjoge1xuICAgIFwibW9kZWxfbmFtZVwiOiBcIlhlbm92YS9qaW5hLWVtYmVkZGluZ3MtdjItc21hbGwtZW5cIixcbiAgICBcImJhdGNoX3NpemVcIjogMSxcbiAgICBcImRpbXNcIjogNTEyLFxuICAgIFwibWF4X3Rva2Vuc1wiOiA4MTkyLFxuICAgIFwibmFtZVwiOiBcIkppbmEtdjItc21hbGwtOEtcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiTG9jYWwsIDgsMTkyIHRva2VucywgNTEyIGRpbVwiLFxuICAgIFwidHlwZVwiOiBcImh1Z2dpbmdmYWNlLXRyYW5zZm9ybWVyc1wiXG4gIH0sXG4gIFwidGV4dC1lbWJlZGRpbmctMy1zbWFsbFwiOiB7XG4gICAgXCJtb2RlbF9uYW1lXCI6IFwidGV4dC1lbWJlZGRpbmctMy1zbWFsbFwiLFxuICAgIFwiYmF0Y2hfc2l6ZVwiOiA1MCxcbiAgICBcImRpbXNcIjogMTUzNixcbiAgICBcIm1heF90b2tlbnNcIjogODE5MSxcbiAgICBcIm5hbWVcIjogXCJPcGVuQUkgVGV4dC0zIFNtYWxsXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkFQSSwgOCwxOTEgdG9rZW5zLCAxLDUzNiBkaW1cIixcbiAgICBcInR5cGVcIjogXCJvcGVuYWlcIlxuICB9LFxuICBcInRleHQtZW1iZWRkaW5nLTMtbGFyZ2VcIjoge1xuICAgIFwibW9kZWxfbmFtZVwiOiBcInRleHQtZW1iZWRkaW5nLTMtbGFyZ2VcIixcbiAgICBcImJhdGNoX3NpemVcIjogNTAsXG4gICAgXCJkaW1zXCI6IDMwNzIsXG4gICAgXCJtYXhfdG9rZW5zXCI6IDgxOTEsXG4gICAgXCJuYW1lXCI6IFwiT3BlbkFJIFRleHQtMyBMYXJnZVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJBUEksIDgsMTkxIHRva2VucywgMywwNzIgZGltXCIsXG4gICAgXCJ0eXBlXCI6IFwib3BlbmFpXCJcbiAgfSxcbiAgXCJ0ZXh0LWVtYmVkZGluZy0zLXNtYWxsLTUxMlwiOiB7XG4gICAgXCJtb2RlbF9uYW1lXCI6IFwidGV4dC1lbWJlZGRpbmctMy1zbWFsbFwiLFxuICAgIFwiYmF0Y2hfc2l6ZVwiOiA1MCxcbiAgICBcImRpbXNcIjogNTEyLFxuICAgIFwibWF4X3Rva2Vuc1wiOiA4MTkxLFxuICAgIFwibmFtZVwiOiBcIk9wZW5BSSBUZXh0LTMgU21hbGwgLSA1MTJcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiQVBJLCA4LDE5MSB0b2tlbnMsIDUxMiBkaW1cIixcbiAgICBcInR5cGVcIjogXCJvcGVuYWlcIlxuICB9LFxuICBcInRleHQtZW1iZWRkaW5nLTMtbGFyZ2UtMjU2XCI6IHtcbiAgICBcIm1vZGVsX25hbWVcIjogXCJ0ZXh0LWVtYmVkZGluZy0zLWxhcmdlXCIsXG4gICAgXCJiYXRjaF9zaXplXCI6IDUwLFxuICAgIFwiZGltc1wiOiAyNTYsXG4gICAgXCJtYXhfdG9rZW5zXCI6IDgxOTEsXG4gICAgXCJuYW1lXCI6IFwiT3BlbkFJIFRleHQtMyBMYXJnZSAtIDI1NlwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJBUEksIDgsMTkxIHRva2VucywgMjU2IGRpbVwiLFxuICAgIFwidHlwZVwiOiBcIm9wZW5haVwiXG4gIH0sXG4gIFwidGV4dC1lbWJlZGRpbmctYWRhLTAwMlwiOiB7XG4gICAgXCJtb2RlbF9uYW1lXCI6IFwidGV4dC1lbWJlZGRpbmctYWRhLTAwMlwiLFxuICAgIFwiYmF0Y2hfc2l6ZVwiOiA1MCxcbiAgICBcImRpbXNcIjogMTUzNixcbiAgICBcIm1heF90b2tlbnNcIjogODE5MSxcbiAgICBcIm5hbWVcIjogXCJPcGVuQUkgQWRhXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkFQSSwgOCwxOTEgdG9rZW5zLCAxLDUzNiBkaW1cIixcbiAgICBcInR5cGVcIjogXCJvcGVuYWlcIlxuICB9XG59IiwgImNvbnN0IG1vZGVscyA9IHJlcXVpcmUoJy4vbW9kZWxzJyk7XG5jbGFzcyBTbWFydEVtYmVkIHtcbiAgY29uc3RydWN0b3IobW9kZWxfY29uZmlnX2tleSkge1xuICAgIHRoaXMubW9kZWxfY29uZmlnX2tleSA9IG1vZGVsX2NvbmZpZ19rZXk7XG4gICAgdGhpcy5jb25maWcgPSBtb2RlbHNbdGhpcy5tb2RlbF9jb25maWdfa2V5XTtcbiAgfVxuICBzdGF0aWMgYXN5bmMgY3JlYXRlKG1vZGVsX2NvbmZpZ19rZXksIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBhZGFwdGVyID0gbmV3IHRoaXMobW9kZWxfY29uZmlnX2tleSwgLi4uYXJncyk7XG4gICAgYXdhaXQgYWRhcHRlci5pbml0KCk7XG4gICAgcmV0dXJuIGFkYXB0ZXI7XG4gIH1cbiAgYXN5bmMgaW5pdCgpIHsgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59XG4gICAqL1xuICBhc3luYyBjb3VudF90b2tlbnMoaW5wdXQpIHsgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcltdPn1cbiAgICovXG4gIGFzeW5jIGVtYmVkKGlucHV0KSB7IH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGlucHV0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcltdW10+fVxuICAgKi9cbiAgYXN5bmMgZW1iZWRfYmF0Y2goaW5wdXQpIHsgfVxuICBnZXQgYmF0Y2hfc2l6ZSgpIHsgcmV0dXJuIHRoaXMuY29uZmlnLmJhdGNoX3NpemU7IH1cbiAgZ2V0IGRpbXMoKSB7IHJldHVybiB0aGlzLmNvbmZpZy5kaW1zOyB9XG4gIGdldCBtYXhfdG9rZW5zKCkgeyByZXR1cm4gdGhpcy5jb25maWcubWF4X3Rva2VuczsgfVxuICBnZXQgbW9kZWxfbmFtZSgpIHsgcmV0dXJuIHRoaXMuY29uZmlnLm1vZGVsX25hbWU7IH1cbn1cblxuZXhwb3J0cy5TbWFydEVtYmVkID0gU21hcnRFbWJlZDsiLCAiY29uc3QgeyBTbWFydEVtYmVkIH0gPSByZXF1aXJlKFwiLi9TbWFydEVtYmVkXCIpO1xuXG5jbGFzcyBTbWFydEVtYmVkVHJhbnNmb3JtZXJzTm9kZUFkYXB0ZXIgZXh0ZW5kcyBTbWFydEVtYmVkIHtcbiAgLy8gYXN5bmMgaW5pdCh0aGlzLm1vZGVsX25hbWUgPSAnWGVub3ZhL2JnZS1zbWFsbC1lbi12MS41Jykge1xuICBhc3luYyBpbml0KCkge1xuICAgIGNvbnN0IHsgZW52LCBwaXBlbGluZSwgQXV0b1Rva2VuaXplciB9ID0gYXdhaXQgaW1wb3J0KCdAeGVub3ZhL3RyYW5zZm9ybWVycycpO1xuICAgIGVudi5hbGxvd0xvY2FsTW9kZWxzID0gZmFsc2U7XG4gICAgdGhpcy5tb2RlbCA9IGF3YWl0IHBpcGVsaW5lKCdmZWF0dXJlLWV4dHJhY3Rpb24nLCB0aGlzLm1vZGVsX25hbWUsIHsgcXVhbnRpemVkOiB0cnVlLCBtYXhfbGVuZ3RoOiB0aGlzLmNvbmZpZy5tYXhfdG9rZW5zIH0pO1xuICAgIC8vIHRoaXMubW9kZWwgPSBhd2FpdCBwaXBlbGluZSgnZmVhdHVyZS1leHRyYWN0aW9uJywgdGhpcy5tb2RlbF9uYW1lLCB7IHF1YW50aXplZDogZmFsc2UgfSk7XG4gICAgdGhpcy50b2tlbml6ZXIgPSBhd2FpdCBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCh0aGlzLm1vZGVsX25hbWUpO1xuICB9XG4gIGFzeW5jIGVtYmVkX2JhdGNoKGl0ZW1zKSB7XG4gICAgaXRlbXMgPSBpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLmVtYmVkX2lucHV0Py5sZW5ndGggPiAwKTsgLy8gcmVtb3ZlIGl0ZW1zIHdpdGggZW1wdHkgZW1iZWRfaW5wdXQgKGNhdXNlcyAuc3BsaXQoKSBlcnJvcilcbiAgICBpZighaXRlbXM/Lmxlbmd0aCkgcmV0dXJuIFtdO1xuICAgIGNvbnN0IHRva2VucyA9IGF3YWl0IFByb21pc2UuYWxsKGl0ZW1zLm1hcChpdGVtID0+IHRoaXMuY291bnRfdG9rZW5zKGl0ZW0uZW1iZWRfaW5wdXQpKSk7XG4gICAgY29uc3QgZW1iZWRfaW5wdXQgPSBhd2FpdCBQcm9taXNlLmFsbChpdGVtcy5tYXAoYXN5bmMgKGl0ZW0sIGkpID0+IHtcbiAgICAgIGlmICh0b2tlbnNbaV0gPCB0aGlzLmNvbmZpZy5tYXhfdG9rZW5zKSByZXR1cm4gaXRlbS5lbWJlZF9pbnB1dDtcbiAgICAgIGxldCB0b2tlbl9jdCA9IHRva2Vuc1tpXTtcbiAgICAgIGxldCB0cnVuY2F0ZWRfaW5wdXQgPSBpdGVtLmVtYmVkX2lucHV0O1xuICAgICAgd2hpbGUgKHRva2VuX2N0ID4gdGhpcy5jb25maWcubWF4X3Rva2Vucykge1xuICAgICAgICBjb25zdCBwY3QgPSB0aGlzLmNvbmZpZy5tYXhfdG9rZW5zIC8gdG9rZW5fY3Q7IC8vIGdldCBwY3Qgb2YgaW5wdXQgdG8ga2VlcFxuICAgICAgICBjb25zdCBtYXhfY2hhcnMgPSBNYXRoLmZsb29yKHRydW5jYXRlZF9pbnB1dC5sZW5ndGggKiBwY3QgKiAwLjkwKTsgLy8gZ2V0IG51bWJlciBvZiBjaGFyYWN0ZXJzIHRvIGtlZXAgKG1pbnVzIDEwJSBmb3Igc2FmZXR5KVxuICAgICAgICB0cnVuY2F0ZWRfaW5wdXQgPSB0cnVuY2F0ZWRfaW5wdXQuc3Vic3RyaW5nKDAsIG1heF9jaGFycykgKyBcIi4uLlwiO1xuICAgICAgICB0b2tlbl9jdCA9IGF3YWl0IHRoaXMuY291bnRfdG9rZW5zKHRydW5jYXRlZF9pbnB1dCk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhcIklucHV0IHRvbyBsb25nLiBUcnVuY2F0aW5nIHRvIFwiLCB0cnVuY2F0ZWRfaW5wdXQubGVuZ3RoLCBcIiBjaGFyYWN0ZXJzLlwiKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiVG9rZW5zOiBcIiwgdG9rZW5zW2ldLCBcIiAtPiBcIiwgdG9rZW5fY3QpO1xuICAgICAgdG9rZW5zW2ldID0gdG9rZW5fY3Q7XG4gICAgICByZXR1cm4gdHJ1bmNhdGVkX2lucHV0O1xuICAgIH0pKTtcblxuICAgIC8vIGNvbnNvbGUubG9nKGVtYmVkX2lucHV0KTtcbiAgICB0cnl7XG4gICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5tb2RlbChlbWJlZF9pbnB1dCwgeyBwb29saW5nOiAnbWVhbicsIG5vcm1hbGl6ZTogdHJ1ZSB9KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHJlc3ApO1xuICAgICAgcmV0dXJuIGl0ZW1zLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICBpdGVtLnZlYyA9IEFycmF5LmZyb20ocmVzcFtpXS5kYXRhKTtcbiAgICAgICAgaXRlbS50b2tlbnMgPSB0b2tlbnNbaV07XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfSk7XG4gICAgfWNhdGNoKGVycil7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgY29uc29sZS5sb2coXCJFcnJvciBlbWJlZGRpbmcgYmF0Y2guIFRyeWluZyBvbmUgYXQgYSB0aW1lLi4uXCIpO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwoaXRlbXMubWFwKGFzeW5jIGl0ZW0gPT4ge1xuICAgICAgY29uc3QgeyB2ZWMsIHRva2VucywgZXJyb3IgfSA9IGF3YWl0IHRoaXMuZW1iZWQoaXRlbS5lbWJlZF9pbnB1dCk7XG4gICAgICBpZihlcnJvcil7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgZW1iZWRkaW5nIGl0ZW06IFwiLCBpdGVtLmtleSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgaXRlbS5lcnJvciA9IGVycm9yO1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH1cbiAgICAgIGlmKCF2ZWMpe1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIGVtYmVkZGluZyBpdGVtOiBcIiwgaXRlbS5rZXkpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIlZlYzogXCIsIHZlYyk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiLCBlcnJvcik7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVG9rZW5zOiBcIiwgdG9rZW5zKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJObyB2ZWMgcmV0dXJuZWRcIik7XG4gICAgICAgIGl0ZW0uZXJyb3IgPSBcIk5vIHZlYyByZXR1cm5lZFwiO1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH1cbiAgICAgIGl0ZW0udmVjID0gdmVjLm1hcCh2YWwgPT4gTWF0aC5yb3VuZCh2YWwgKiAxMDAwMDAwMDApIC8gMTAwMDAwMDAwKTsgLy8gcmVkdWNlIHByZWNpc2lvbiB0byA4IGRlY2ltYWwgcGxhY2VzIHJlZjogaHR0cHM6Ly93Zmhicmlhbi5jb20vdmVjdG9yLWRpbWVuc2lvbi1wcmVjaXNpb24tZWZmZWN0LW9uLWNvc2luZS1zaW1pbGFyaXR5L1xuICAgICAgaXRlbS50b2tlbnMgPSB0b2tlbnM7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9KSk7XG4gIH1cbiAgYXN5bmMgZW1iZWQoaW5wdXQpIHtcbiAgICBjb25zdCBvdXRwdXQgPSB7IGVtYmVkX2lucHV0OiBpbnB1dCB9O1xuICAgIGlmICghaW5wdXQpIHJldHVybiB7IC4uLm91dHB1dCwgZXJyb3I6IFwiTm8gaW5wdXQgdGV4dC5cIiB9O1xuICAgIGlmICghdGhpcy5tb2RlbCkgYXdhaXQgdGhpcy5pbml0KCk7XG4gICAgdHJ5IHtcbiAgICAgIG91dHB1dC50b2tlbnMgPSBhd2FpdCB0aGlzLmNvdW50X3Rva2VucyhpbnB1dCk7XG4gICAgICBpZiAob3V0cHV0LnRva2VucyA8IDEpIHJldHVybiB7IC4uLm91dHB1dCwgZXJyb3I6IFwiSW5wdXQgdG9vIHNob3J0LlwiIH07XG4gICAgICBpZiAob3V0cHV0LnRva2VucyA8IHRoaXMuY29uZmlnLm1heF90b2tlbnMpIHtcbiAgICAgICAgY29uc3QgZW1iZWRkaW5nID0gYXdhaXQgdGhpcy5tb2RlbChpbnB1dCwgeyBwb29saW5nOiAnbWVhbicsIG5vcm1hbGl6ZTogdHJ1ZSB9KTtcbiAgICAgICAgb3V0cHV0LnZlYyA9IEFycmF5LmZyb20oZW1iZWRkaW5nLmRhdGEpLm1hcCh2YWwgPT4gTWF0aC5yb3VuZCh2YWwgKiAxMDAwMDAwMDApIC8gMTAwMDAwMDAwKTsgLy8gcmVkdWNlIHByZWNpc2lvbiB0byA4IGRlY2ltYWwgcGxhY2VzIHJlZjogaHR0cHM6Ly93Zmhicmlhbi5jb20vdmVjdG9yLWRpbWVuc2lvbi1wcmVjaXNpb24tZWZmZWN0LW9uLWNvc2luZS1zaW1pbGFyaXR5L1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcGN0ID0gdGhpcy5jb25maWcubWF4X3Rva2VucyAvIG91dHB1dC50b2tlbnM7IC8vIGdldCBwY3Qgb2YgaW5wdXQgdG8ga2VlcFxuICAgICAgICBjb25zdCBtYXhfY2hhcnMgPSBNYXRoLmZsb29yKGlucHV0Lmxlbmd0aCAqIHBjdCAqIDAuOTUpOyAvLyBnZXQgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdG8ga2VlcCAobWludXMgNSUgZm9yIHNhZmV0eSlcbiAgICAgICAgaW5wdXQgPSBpbnB1dC5zdWJzdHJpbmcoMCwgbWF4X2NoYXJzKSArIFwiLi4uXCI7XG4gICAgICAgIG91dHB1dC50cnVuY2F0ZWQgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmxvZyhcIklucHV0IHRvbyBsb25nLiBUcnVuY2F0aW5nIHRvIFwiLCBpbnB1dC5sZW5ndGgsIFwiIGNoYXJhY3RlcnMuXCIpO1xuICAgICAgICBjb25zdCB7IHZlYywgdG9rZW5zIH0gPSBhd2FpdCB0aGlzLmVtYmVkKGlucHV0KTtcbiAgICAgICAgb3V0cHV0LnZlYyA9IHZlYztcbiAgICAgICAgb3V0cHV0LnRva2VucyA9IHRva2VucztcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgcmV0dXJuIHsgLi4ub3V0cHV0LCBlcnJvcjogZXJyLm1lc3NhZ2UgfTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgY291bnRfdG9rZW5zKHRleHQpIHtcbiAgICBpZiAoIXRoaXMudG9rZW5pemVyKSBhd2FpdCB0aGlzLmluaXQoKTtcbiAgICBjb25zdCB7IGlucHV0X2lkcyB9ID0gYXdhaXQgdGhpcy50b2tlbml6ZXIodGV4dCk7XG4gICAgcmV0dXJuIGlucHV0X2lkcy5kYXRhLmxlbmd0aDsgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgdG9rZW5zXG4gIH1cbn1cblxuZXhwb3J0cy5TbWFydEVtYmVkVHJhbnNmb3JtZXJzTm9kZUFkYXB0ZXIgPSBTbWFydEVtYmVkVHJhbnNmb3JtZXJzTm9kZUFkYXB0ZXI7XG5leHBvcnRzLlNtYXJ0RW1iZWRMb2NhbEFkYXB0ZXIgPSBTbWFydEVtYmVkVHJhbnNmb3JtZXJzTm9kZUFkYXB0ZXI7IC8vIGFsaWFzIiwgImNvbnN0IHsgU21hcnRFbWJlZFRyYW5zZm9ybWVyc05vZGVBZGFwdGVyIH0gPSByZXF1aXJlKCcuL1NtYXJ0RW1iZWRUcmFuc2Zvcm1lcnNOb2RlQWRhcHRlcicpO1xuY29uc3QgbW9kZWxzID0gcmVxdWlyZSgnLi9tb2RlbHMnKTtcblxuLy8gQ09OTkVDVE9SIEZPUiBPQlNJRElBTlxuY2xhc3MgU21hcnRFbWJlZFRyYW5zZm9ybWVyc1dlYkNvbm5lY3RvciBleHRlbmRzIFNtYXJ0RW1iZWRUcmFuc2Zvcm1lcnNOb2RlQWRhcHRlciB7XG4gIGNvbnN0cnVjdG9yKG1vZGVsX2NvbmZpZ19rZXksIHdpbmRvdykge1xuICAgIHN1cGVyKG1vZGVsX2NvbmZpZ19rZXkpO1xuICAgIHRoaXMubW9kZWwgPSBudWxsO1xuICAgIHRoaXMucnVubmluZ19pbml0ID0gZmFsc2U7XG4gICAgdGhpcy53aW5kb3cgPSB3aW5kb3c7XG4gICAgLy8gc3RhdHNcbiAgICB0aGlzLmVtYmVkX2N0ID0gMDtcbiAgICB0aGlzLnRpbWVzdGFtcCA9IG51bGw7XG4gICAgdGhpcy50b2tlbnMgPSAwO1xuICB9XG4gIGFzeW5jIGluaXQoKSB7XG4gICAgaWYgKHRoaXMubW9kZWwpIHJldHVybiBjb25zb2xlLmxvZyhcIlNtYXJ0IExvY2FsIE1vZGVsIGFscmVhZHkgbG9hZGVkXCIpO1xuICAgIGlmICh0aGlzLnJ1bm5pbmdfaW5pdCkgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDMwMDApKTtcbiAgICBpZiAoIXRoaXMubW9kZWwgJiYgIXRoaXMucnVubmluZ19pbml0KSB0aGlzLnJ1bm5pbmdfaW5pdCA9IHRydWU7XG4gICAgY29uc29sZS5sb2coXCJMb2FkaW5nIFNtYXJ0IExvY2FsIE1vZGVsXCIpO1xuICAgIC8vIGNvbnN0IHsgcGlwZWxpbmUsIGVudiwgQXV0b1Rva2VuaXplciB9ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL0B4ZW5vdmEvdHJhbnNmb3JtZXJzQDIuMTMuMCcpO1xuICAgIGNvbnN0IHsgcGlwZWxpbmUsIGVudiwgQXV0b1Rva2VuaXplciB9ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL0B4ZW5vdmEvdHJhbnNmb3JtZXJzQGxhdGVzdCcpO1xuICAgIGVudi5hbGxvd0xvY2FsTW9kZWxzID0gZmFsc2U7XG4gICAgdGhpcy5tb2RlbCA9IGF3YWl0IHBpcGVsaW5lKCdmZWF0dXJlLWV4dHJhY3Rpb24nLCB0aGlzLm1vZGVsX25hbWUsIHsgcXVhbnRpemVkOiB0cnVlIH0pO1xuICAgIHRoaXMudG9rZW5pemVyID0gYXdhaXQgQXV0b1Rva2VuaXplci5mcm9tX3ByZXRyYWluZWQodGhpcy5tb2RlbF9uYW1lKTtcbiAgICB0aGlzLnJ1bm5pbmdfaW5pdCA9IGZhbHNlO1xuICAgIHRoaXMud2luZG93LnRva2VuaXplciA9IHRoaXMudG9rZW5pemVyO1xuICAgIGNvbnNvbGUubG9nKGF3YWl0IHRoaXMuZW1iZWQoXCJ0ZXN0XCIpKTtcbiAgICB0aGlzLndpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoeyB0eXBlOiBcIm1vZGVsX2xvYWRlZFwiLCBkYXRhOiB0cnVlIH0sIFwiKlwiKTsgLy8gcG9zdCBtZXNzYWdlIHRvIHBhcmVudCB0aGF0IG1vZGVsIGlzIGxvYWRlZFxuICAgIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlX2lwYy5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gIH1cbiAgYXN5bmMgaGFuZGxlX2lwYyhldmVudCkge1xuICAgIGlmIChldmVudC5kYXRhLnR5cGUgPT0gXCJzbWFydF9lbWJlZFwiKSB0aGlzLmVtYmVkX2hhbmRsZXIoZXZlbnQuZGF0YSk7XG4gICAgLy8gaWYgKGV2ZW50LmRhdGEudHlwZSA9PSBcInNtYXJ0X2VtYmVkX2JhdGNoXCIpIHRoaXMuZW1iZWRfYmF0Y2hfaGFuZGxlcihldmVudC5kYXRhLmVtYmVkX2lucHV0KTtcbiAgICBpZiAoZXZlbnQuZGF0YS50eXBlID09IFwic21hcnRfZW1iZWRfdG9rZW5fY3RcIikgdGhpcy5jb3VudF90b2tlbnNfaGFuZGxlcihldmVudC5kYXRhLmVtYmVkX2lucHV0KTtcbiAgfVxuICBhc3luYyBlbWJlZF9oYW5kbGVyKGV2ZW50X2RhdGEpIHtcbiAgICBjb25zdCB7IGVtYmVkX2lucHV0LCBoYW5kbGVyX2lkIH0gPSBldmVudF9kYXRhO1xuICAgIC8vIGNvbnNvbGUubG9nKGVtYmVkX2lucHV0KTtcbiAgICBpZighdGhpcy50aW1lc3RhbXApIHRoaXMudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICBpZihBcnJheS5pc0FycmF5KGVtYmVkX2lucHV0KSkge1xuICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHRoaXMuZW1iZWRfYmF0Y2goZW1iZWRfaW5wdXQpO1xuICAgICAgY29uc3Qgc2VuZF9kYXRhID0ge1xuICAgICAgICB0eXBlOiBcInNtYXJ0X2VtYmVkX3Jlc3BcIixcbiAgICAgICAgaGFuZGxlcl9pZCxcbiAgICAgICAgZGF0YTogcmVzcCxcbiAgICAgIH07XG4gICAgICB0aGlzLndpbmRvdy5wb3N0TWVzc2FnZShzZW5kX2RhdGEsIFwiKlwiKTtcbiAgICAgIHRoaXMudG9rZW5zICs9IHJlc3AucmVkdWNlKChhY2MsIGl0ZW0pID0+IGFjYyArIGl0ZW0udG9rZW5zLCAwKTtcbiAgICAgIHRoaXMuZW1iZWRfY3QgKz0gcmVzcC5sZW5ndGg7XG4gICAgfWVsc2V7XG4gICAgICBpZiAoIXRoaXMudGltZXN0YW1wKSB0aGlzLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCBzZW5kX2RhdGEgPSBhd2FpdCB0aGlzLmVtYmVkKGVtYmVkX2lucHV0KTtcbiAgICAgIHNlbmRfZGF0YS50eXBlID0gXCJzbWFydF9lbWJlZF9yZXNwXCI7XG4gICAgICBpZiAoaGFuZGxlcl9pZCkgc2VuZF9kYXRhLmhhbmRsZXJfaWQgPSBoYW5kbGVyX2lkO1xuICAgICAgdGhpcy53aW5kb3cucG9zdE1lc3NhZ2Uoc2VuZF9kYXRhLCBcIipcIik7XG4gICAgICB0aGlzLnRva2VucyArPSBzZW5kX2RhdGEudG9rZW5zO1xuICAgICAgdGhpcy5lbWJlZF9jdCsrO1xuICAgIH1cbiAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMudGltZXN0YW1wID4gMTAwMDApIHtcbiAgICAgIGNvbnNvbGUubG9nKGBFbWJlZGRlZDogJHt0aGlzLmVtYmVkX2N0fSBpbnB1dHMgKCR7dGhpcy50b2tlbnN9IHRva2VucywgJHsodGhpcy50b2tlbnMgLyAoKERhdGUubm93KCkgLSB0aGlzLnRpbWVzdGFtcCkgLyAxMDAwKSkudG9GaXhlZCgwKX0gdG9rZW5zL3NlYylgKTtcbiAgICAgIHRoaXMudGltZXN0YW1wID0gbnVsbDtcbiAgICAgIHRoaXMudG9rZW5zID0gMDtcbiAgICAgIHRoaXMuZW1iZWRfY3QgPSAwO1xuICAgIH1cbiAgfVxuICBhc3luYyBjb3VudF90b2tlbnNfaGFuZGxlcihpbnB1dCkge1xuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuY291bnRfdG9rZW5zKGlucHV0KTtcbiAgICBjb25zdCBzZW5kX2RhdGEgPSB7XG4gICAgICB0eXBlOiBcInNtYXJ0X2VtYmVkX3Rva2VuX2N0XCIsXG4gICAgICB0ZXh0OiBcImNvdW50OlwiICsgaW5wdXQsXG4gICAgICBjb3VudDogb3V0cHV0XG4gICAgfTtcbiAgICB0aGlzLndpbmRvdy5wb3N0TWVzc2FnZShzZW5kX2RhdGEsIFwiKlwiKTtcbiAgfVxufVxuZXhwb3J0cy5TbWFydEVtYmVkVHJhbnNmb3JtZXJzV2ViQ29ubmVjdG9yID0gU21hcnRFbWJlZFRyYW5zZm9ybWVyc1dlYkNvbm5lY3RvcjsiLCAid2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBpbml0KTsgLy8gbGlzdGVuIGZvciBpbml0IG1lc3NhZ2VcbmFzeW5jIGZ1bmN0aW9uIGluaXQoZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmRhdGEudHlwZSA9PT0gJ2luaXQnKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBpbml0KTsgLy8gcmVtb3ZlIHRoaXMgZXZlbnQgbGlzdGVuZXJcbiAgICBjb25zdCBtb2RlbF9jb25maWdfa2V5ID0gZXZlbnQuZGF0YS5tb2RlbF9jb25maWdfa2V5O1xuICAgIGNvbnN0IHsgU21hcnRFbWJlZFRyYW5zZm9ybWVyc1dlYkNvbm5lY3RvciB9ID0gYXdhaXQgaW1wb3J0KCcuL1NtYXJ0RW1iZWRUcmFuc2Zvcm1lcnNXZWJDb25uZWN0b3IuanMnKTtcbiAgICBjb25zdCBtb2RlbCA9IGF3YWl0IFNtYXJ0RW1iZWRUcmFuc2Zvcm1lcnNXZWJDb25uZWN0b3IuY3JlYXRlKG1vZGVsX2NvbmZpZ19rZXksIHdpbmRvdyk7XG4gICAgd2luZG93Lm1vZGVsID0gbW9kZWw7XG4gIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBLHlCQUFBQSxTQUFBO0FBQUEsSUFBQUEsUUFBQTtBQUFBLE1BQ0UseUJBQXlCO0FBQUEsUUFDdkIsWUFBYztBQUFBLFFBQ2QsWUFBYztBQUFBLFFBQ2QsTUFBUTtBQUFBLFFBQ1IsWUFBYztBQUFBLFFBQ2QsTUFBUTtBQUFBLFFBQ1IsYUFBZTtBQUFBLFFBQ2YsTUFBUTtBQUFBLE1BQ1Y7QUFBQSxNQUNBLDRCQUE0QjtBQUFBLFFBQzFCLFlBQWM7QUFBQSxRQUNkLFlBQWM7QUFBQSxRQUNkLE1BQVE7QUFBQSxRQUNSLFlBQWM7QUFBQSxRQUNkLE1BQVE7QUFBQSxRQUNSLGFBQWU7QUFBQSxRQUNmLE1BQVE7QUFBQSxNQUNWO0FBQUEsTUFDQSwyQ0FBMkM7QUFBQSxRQUN6QyxZQUFjO0FBQUEsUUFDZCxZQUFjO0FBQUEsUUFDZCxNQUFRO0FBQUEsUUFDUixZQUFjO0FBQUEsUUFDZCxNQUFRO0FBQUEsUUFDUixhQUFlO0FBQUEsUUFDZixNQUFRO0FBQUEsTUFDVjtBQUFBLE1BQ0EsMkNBQTJDO0FBQUEsUUFDekMsWUFBYztBQUFBLFFBQ2QsWUFBYztBQUFBLFFBQ2QsTUFBUTtBQUFBLFFBQ1IsWUFBYztBQUFBLFFBQ2QsTUFBUTtB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QUEsTUFDQSxNQUFNLGNBQWMsWUFBWTtBQUM5QixjQUFNLEVBQUUsYUFBYSxXQUFXLElBQUk7QUFFcEMsWUFBRyxDQUFDLEtBQUs7QUFBVyxlQUFLLFlBQVksS0FBSyxJQUFJO0FBQzlDLFlBQUcsTUFBTSxRQUFRLFdBQVcsR0FBRztBQUM3QixnQkFBTSxPQUFPLE1BQU0sS0FBSyxZQUFZLFdBQVc7QUFDL0MsZ0JBQU0sWUFBWTtBQUFBLFlBQ2hCLE1BQU07QUFBQSxZQUNOO0FBQUEsWUFDQSxNQUFNO0FBQUEsVUFDUjtBQUNBLGVBQUssT0FBTyxZQUFZLFdBQVcsR0FBRztBQUN0QyxlQUFLLFVBQVUsS0FBSyxPQUFPLENBQUMsS0FBSyxTQUFTLE1BQU0sS0FBSyxRQUFRLENBQUM7QUFDOUQsZUFBSyxZQUFZLEtBQUs7QUFBQSxRQUN4QixPQUFLO0FBQ0gsY0FBSSxDQUFDLEtBQUs7QUFBVyxpQkFBSyxZQUFZLEtBQUssSUFBSTtBQUMvQyxnQkFBTSxZQUFZLE1BQU0sS0FBSyxNQUFNLFdBQVc7QUFDOUMsb0JBQVUsT0FBTztBQUNqQixjQUFJO0FBQVksc0JBQVUsYUFBYTtBQUN2QyxlQUFLLE9BQU8sWUFBWSxXQUFXLEdBQUc7QUFDdEMsZUFBSyxVQUFVLFVBQVU7QUFDekIsZUFBSztBQUFBLFFBQ1A7QUFDQSxZQUFJLEtBQUssSUFBSSxJQUFJLEtBQUssWUFBWSxLQUFPO0FBQ3ZDLGtCQUFRLElBQUksYUFBYSxLQUFLLFFBQVEsWUFBWSxLQUFLLE1BQU0sYUFBYSxLQUFLLFdBQVcsS0FBSyxJQUFJLElBQUksS0FBSyxhQUFhLE1BQU8sUUFBUSxDQUFDLENBQUMsY0FBYztBQUN4SixlQUFLLFlBQVk7QUFDakIsZUFBSyxTQUFTO0FBQ2QsZUFBSyxXQUFXO0FBQUEsUUFDbEI7QUFBQSxNQUNGO0FBQUEsTUFDQSxNQUFNLHFCQUFxQixPQUFPO0FBQ2hDLGNBQU0sU0FBUyxNQUFNLEtBQUssYUFBYSxLQUFLO0FBQzVDLGNBQU0sWUFBWTtBQUFBLFVBQ2hCLE1BQU07QUFBQSxVQUNOLE1BQU0sV0FBVztBQUFBLFVBQ2pCLE9BQU87QUFBQSxRQUNUO0FBQ0EsYUFBSyxPQUFPLFlBQVksV0FBVyxHQUFHO0FBQUEsTUFDeEM7QUFBQSxJQUNGO0FBQ0EsWUFBUSxxQ0FBcUM7QUFBQTtBQUFBOzs7QUM1RTdDLE9BQU8saUJBQWlCLFdBQVcsSUFBSTtBQUN2QyxlQUFlLEtBQUssT0FBTztBQUN6QixNQUFJLE1BQU0sS0FBSyxTQUFTLFFBQVE7QUFDOUIsV0FBTyxvQkFBb0IsV0FBVyxJQUFJO0FBQzFDLFVBQU0sbUJBQW1CLE1BQU0sS0FBSztBQUNwQyxVQUFNLEVBQUUsbUNBQW1DLElBQUksTUFBTTtBQUNyRCxVQUFNLFFBQVEsTUFBTSxtQ0FBbUMsT0FBTyxrQkFBa0IsTUFBTTtBQUN0RixXQUFPLFFBQVE7QUFBQSxFQUNqQjtBQUNGOyIsCiAgIm5hbWVzIjogWyJtb2R1bGUiLCAidG9rZW5zIiwgIndpbmRvdyJdCn0K\n"
}